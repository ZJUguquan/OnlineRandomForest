% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Tree.R
\docType{data}
\name{Tree}
\alias{Tree}
\title{Create a Tree Object}
\format{\code{\link{R6Class}} object.}
\usage{
Tree$new(elem = NULL, left = NULL, right = NULL, node.ind = 1)
}
\arguments{
\item{elem}{The element in the tree. More details show in \code{help(Elem)}. Default NULL.}

\item{left}{The left child of the Tree. Also a Tree oject. Default NULL.}

\item{right}{The right child of the Tree. Also a Tree oject. Default NULL.}

\item{node.ind}{The index of the current node in Tree. Default \code{1} for the root node.}
}
\value{
Object of \code{\link{R6Class}}, Object of Tree.
}
\description{
Tree is a class of R6. You can use it to create a binary tree via many ways.
}
\details{
See details in description of each field or method.
}
\section{Fields}{

\describe{See \strong{Arguments}.}
}

\section{Methods}{

\describe{
\item{\code{generateTree(tree.mat, node.ind = 1)}}{
Generate a Tree from a tree matrix which just likes the result of \code{randomForest::getTree()}.\cr
\itemize{
\item tree.mat - A tree matrix which can be obtained from \code{randomForest::getTree()}. Node that it must have a column named \strong{node.ind}. See \strong{Examples}. \cr
\item node.ind - The index of the current node in Tree. Default \code{1} for the root node. For most purposes, don't need to change it.
}
}
\item{\code{updateChildren(l, r)}}{
\itemize{
Update childre of the current node.
\item l - The left child. \cr
\item r - The right child.
}
}
\item{\code{isLeaf()}}{TRUE if current node is a leaf node otherwise FALSE.}
\item{\code{size()}}{Return size of Tree. For each node, size + 1.}
\item{\code{numLeaves()}}{Return how many leaf nodes in Tree.}
\item{\code{depth()}}{Return max depth of Tree. If only a root node, depth is 0.}
\item{\code{draw()}}{Draw the Tree.}
}
}

\examples{
ta <- Tree$new("abc", NULL, NULL)
tb <- Tree$new(1, Tree$new(36), Tree$new(3))
tc <- Tree$new(89, tb, ta)
td <- Tree$new("guquan", tc, tb)

tb$draw()
tb$size()
tb$depth()
tc$draw()
tc$depth()
tc$right$updateChildren(Tree$new("666"), Tree$new(999))
tc$right$right$updateChildren(Tree$new("666"), Tree$new(999))
tc$draw()
td$draw()

# generate a Tree from randomForest
if (!require(randomForest)) install.packages("randomForest")
library(randomForest)
dat <- iris; dat[,5] <- as.integer(dat[,5])
rf <- randomForest(factor(Species) ~ ., data=dat)
treemat <- getTree(rf, 1, labelVar = F)
treemat <- cbind(treemat, node.ind = 1:nrow(treemat))
tree <- Tree$new()
tree$generateTree(treemat)
tree$draw()

}
\author{
Quan Gu
}
\keyword{datasets}
